version: "3.9"

services:
  gitlab:
    image: gitlab/gitlab-ce:latest # Community Edition
    container_name: gitlab
    restart: always
    hostname: gitlab.devops.com # replace with your domain or server IP
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://gitlab.devops.com'  # use https if SSL is configured
        gitlab_rails['gitlab_shell_ssh_port'] = 2222
    ports:
      - "8082:80" # HTTP
      - "8443:443" # HTTPS
      - "2222:22" # SSH access for Git
    volumes:
      - gitlab-config:/etc/gitlab
      - gitlab-logs:/var/log/gitlab
      - gitlab-data:/var/opt/gitlab
  sonarqube-db:
    image: postgres:15
    container_name: sonarqube-db
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonarqube
    volumes:
      - sonarqube-db-data:/var/lib/postgresql/data
    restart: always
  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    depends_on:
      - sonarqube-db
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonarqube-db:5432/sonarqube
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
      SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true" # avoids memory issues in Docker
    ports:
      - "8081:9000"
    volumes:
      - sonarqube-data:/opt/sonarqube/data
      - sonarqube-logs:/opt/sonarqube/logs
      - sonarqube-extensions:/opt/sonarqube/extensions
    restart: always
  apiserver:
    image: dependencytrack/apiserver
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      ALPINE_DATABASE_MODE: "external"
      ALPINE_DATABASE_URL: "jdbc:postgresql://postgres:5432/dtrack"
      ALPINE_DATABASE_DRIVER: "org.postgresql.Driver"
      ALPINE_DATABASE_USERNAME: ${ALPINE_DATABASE_USERNAME}
      ALPINE_DATABASE_PASSWORD: ${ALPINE_DATABASE_PASSWORD}
        #ALPINE_HTTP_PROXY_ADDRESS: ${ALPINE_HTTP_PROXY_ADDRESS}
        #ALPINE_HTTP_PROXY_PORT: ${ALPINE_HTTP_PROXY_PORT}
        #ALPINE_NO_PROXY: ${ALPINE_NO_PROXY}
    deploy:
      resources:
        limits:
          memory: 5000m
        reservations:
          memory: 3000m
      restart_policy:
        condition: on-failure
    ports:
    - '8085:8080'
    volumes:
    - 'dtrack-data:/data'
    restart: unless-stopped

  frontend:
    image: dependencytrack/frontend
    env_file: .env
    depends_on:
      apiserver:
        condition: service_healthy
    environment:
      API_BASE_URL: ${FRONTEND_API_BASE_URL}
    ports:
      - "8084:8080"
    restart: unless-stopped

  postgres:
    image: postgres:17-alpine
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 5s
      timeout: 3s
      retries: 3
    volumes:
    - "postgres-data-v2:/var/lib/postgresql/data"
    restart: unless-stopped

volumes:
  gitlab-config:
  gitlab-logs:
  gitlab-data:
  sonarqube-db-data:
  sonarqube-data:
  sonarqube-logs:
  sonarqube-extensions:
  dtrack-data: {}
  postgres-data-v2: {}

stages:
  - scan
  - build
  - deploy





# ******** Commented out the GitLab Runner's Docker daemon as we will be using the docker that is running in my local machine. *******
# default:
#   image: docker:latest
#   services:
#     - docker:dind






variables:
  # ******* we need this only if we are using the GitLab Runner's Docker daemon. *******
  # DOCKER_DRIVER: overlay2
  # DOCKER_TLS_CERTDIR: "/certs"
  # DOCKER_HOST: "tcp://docker:2375"
  # **************
  DOCKER_HUB_USERNAME: "alfahimbin"
  APP_NAME: "flask-app"
  NGINX_NAME: "flask-nginx"






.branch_rules: &branch_rules
  rules:
    - &dev_rule
      if: '$CI_COMMIT_BRANCH =~ /^(develop)$/'
      variables: &dev_vars
        ENVIRONMENT: development
        IMAGE_TAG: development-$CI_PIPELINE_ID
    - &stage_rule
      if: '$CI_COMMIT_BRANCH =~ /^(staging)$/'
      variables: &stage_vars
        ENVIRONMENT: staging
        IMAGE_TAG: staging-$CI_PIPELINE_ID
    - &prod_rule
      if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'
      variables: &prod_vars
        ENVIRONMENT: production
        IMAGE_TAG: $CI_COMMIT_TAG
    - &main_rule
      if: '$CI_COMMIT_BRANCH == "main"'
      variables:
        ENVIRONMENT: production
        IMAGE_TAG: latest






# ===== SCAN STAGE =====

gitleaks_scan:
  <<: *branch_rules
  stage: scan
  tags:
    - runner
  image:
    name: zricethezav/gitleaks:latest
    entrypoint: [''] # doing this so that below script will be executed as shell command.
  script:
    - echo "Running Gitleaks scan..."
    - gitleaks detect --source . --verbose --no-git
  allow_failure: false






# ===== BUILD STAGE =====

build:
  <<: *branch_rules
  stage: build
  needs:
    - job: gitleaks_scan
  tags:
    - runner
  before_script:
    - echo "Waiting for Docker daemon to be ready..."
    - until docker info; do echo "Waiting for docker..."; sleep 1; done
    - echo "Docker daemon is ready!"
    - echo "Logging into Docker Hub..."
    - echo ${DOCKER_HUB_PASSWORD} | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin
  script:
    # Build and push Flask app image
    - echo "Building Flask app Docker image..."
    - export FULL_APP_IMAGE="${DOCKER_HUB_USERNAME}/${APP_NAME}:${IMAGE_TAG}"
    - echo "App image will be tagged as ${FULL_APP_IMAGE}"
    - docker build -t ${FULL_APP_IMAGE} -f Dockerfile .
    - echo "Pushing app image to Docker Hub..."
    - docker push ${FULL_APP_IMAGE}
    - echo "App image pushed successfully!"
    
    # Build and push Nginx image
    - echo "Building Nginx Docker image..."
    - export FULL_NGINX_IMAGE="${DOCKER_HUB_USERNAME}/${NGINX_NAME}:${IMAGE_TAG}"
    - echo "Nginx image will be tagged as ${FULL_NGINX_IMAGE}"
    - docker build -t ${FULL_NGINX_IMAGE} -f Dockerfile.nginx .
    - echo "Pushing nginx image to Docker Hub..."
    - docker push ${FULL_NGINX_IMAGE}
    - echo "Nginx image pushed successfully!"
  after_script:
    - docker logout








# ===== DEPLOY STAGE =====

deploy:
  <<: *branch_rules
  stage: deploy
  needs:
    - job: build
  tags:
    - runner
  # image: docker:latest # don't need this if we are using the docker that is running in my local machine.
  before_script:
    - echo "Logging into Docker Hub..."
    - echo ${DOCKER_HUB_PASSWORD} | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin
  script:
    - echo "Deploying to server..."
    - export FULL_APP_IMAGE="${DOCKER_HUB_USERNAME}/${APP_NAME}:${IMAGE_TAG}"
    - export FULL_NGINX_IMAGE="${DOCKER_HUB_USERNAME}/${NGINX_NAME}:${IMAGE_TAG}"
    - echo "Pulling app image ${FULL_APP_IMAGE}..."
    - docker pull ${FULL_APP_IMAGE}
    - echo "Pulling nginx image ${FULL_NGINX_IMAGE}..."
    - docker pull ${FULL_NGINX_IMAGE}
    
    # Deploy using docker-compose
    - echo "Deploying with docker-compose..."
    - export APP_IMAGE=${FULL_APP_IMAGE}
    - export NGINX_IMAGE=${FULL_NGINX_IMAGE}
    - docker compose -f compose.yaml down || true
    - docker compose -f compose.yaml up -d
    
    - echo "Deployment completed!"
  after_script:
    - docker logout
  # environment:
  #   name: $ENVIRONMENT
  #   url: http://localhost:8000